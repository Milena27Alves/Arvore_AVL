class ArvoreAvl:
     
     def __init__(self, key, esqe = None, dir = None):
          self.item = key
          self.esq = esqe
          self.dir = dir

     def __str__(self):
        return str(self.item)

     def setaRoot(self, dado):
          self.root = dado


#Verifica se a árvore está vazia
     def vazia(self):
        if self.root == None:
            return "Vazia"
        else:
            return "Contém elemento"

#Inserir elemento na árvore
     def inserir(self, item):
          if item < self.item:
               if self.esq == None:
                    self.esq = ArvoreAvl(item)
               else:
                    self.esq.inserir(item)
          else:
               if self.dir == None:
                    self.dir = ArvoreAvl(item)
               else:
                    self.dir.inserir(item)
          self.executarBalanceamento()


#Remover elemento
     def remover(self, v):
         if self.root == None:
               return False
         atual = self.root
         pai = self.root
         filho_esq = True

         while atual.item != v: 
               pai = atual
               if v < atual.item:
                    atual = atual.esq
                    filho_esq = True 
               else: 
                    atual = atual.dir 
                    filho_esq = False
               if atual == None:
                    return False
          
         if atual.esq == None and atual.dir == None:
               if atual == self.root:
                    self.root = None
               else:
                    if filho_esq:
                         pai.esq =  None 
                    else:
                         pai.dir = None 
         elif atual.dir == None:
               if atual == self.root:
                    self.root = atual.esq 
               else:
                    if filho_esq:
                         pai.esq = atual.esq 
                    else:
                         pai.dir = atual.esq
         elif atual.esq == None:
               if atual == self.root:
                    self.root = atual.dir
               else:
                    if filho_esq:
                         pai.esq = atual.dir
                    else:
                         pai.dir = atual.dir
         else:
               sucessor = self.nosucessor(atual)
               if atual == self.root:
                    self.root = sucessor
               else:
                    if filho_esq:
                         pai.esq = sucessor
                    else:
                         pai.dir = sucessor
               sucessor.esq = atual.esq
         return True


     def nosucessor(self, apaga):
          paidosucessor = apaga
          sucessor = apaga
          atual = apaga.dir 

          while atual != None:
               paidosucessor = sucessor
               sucessor = atual
               atual = atual.esq 

          if sucessor != apaga.dir:
               paidosucessor.esq = sucessor.dir 
               sucessor.dir = apaga.dir 
          return sucessor


# Altura da árvore
     def alt(self):
         return self.altura(self.root)

     def altura(self,no):

         if no == None:
             return -1
         esquerdo = self.altura(no.esq)
         direito = self.altura(no.dir)
         if esquerdo>direito:
             return esquerdo+1
         else:
             return direito+1

# Buscar elemento na árvore
     def busca(self, valor):
         self.buscar(self.root, valor)

     def buscar(self, no, v):
         if no == None:
             return 
         if no.item == v:
             print("valor encontrado: ", v)
         self.buscar(no.esq, v)
         self.buscar(no.dir, v)

#Buscar elemento na árvore ordenada
     def busca_arvore_ordenada(self, chave):
         if self.root == None:
              return None
         atual = self.root 
         while atual.item != chave:
               if chave < atual.item:
                    atual = atual.esq 
               else:
                    atual = atual.dir
               if atual == None:
                    return None 
         return atual 

#Percurso ERD
     def erd(self):
         self.inOrder(self.root)

     def inOrder(self, atual):
         if atual != None:
              self.inOrder(atual.esq)
              print(atual.item,end=" ")
              self.inOrder(atual.dir)

#Percurso RED
     def red(self):
         self.preOrder(self.root)

     def preOrder(self, atual):
         if atual != None:
              print(atual.item,end=" ")
              print("(", end=" ")
              self.preOrder(atual.esq)
              self.preOrder(atual.dir)
              print(")", end=" ")



    #balanceamento

     def balanceado(self):
          fator = self.FatorBalanceador()  
          if(fator < -1 or fator > 1):
               return False
          else:
               return True

     def executarBalanceamento(self):
          fator = self.FatorBalanceador()
          if fator > 1:
               if self.esq.FatorBalanceador() > 0:
                    self.rotacaoDireita()
               else:
                    self.rotacaoEsquerdaDireita()
          elif fator < -1:
               if self.dir.FatorBalanceador() < 0:
                    self.rotacaoEsquerda()
               else:
                    self.rotacaoDireitaEsquerda()

     def FatorBalanceador(self):
          lado_esq = 0
          if self.esq:
               lado_esq = self.esq.alturaDosLados()
          lado_dir = 0
          if self.dir:
               lado_dir = self.dir.alturaDosLados()
          return lado_esq - lado_dir    

     def alturaDosLados(self):
          lado_esq = 0
          if self.esq:
               lado_esq = self.esq.alturaDosLados()
          lado_dir = 0
          if self.dir:
               lado_dir = self.dir.alturaDosLados()
          return 1 + max(lado_esq, lado_dir)

     def rotacaoEsquerda(self):
          self.item, self.dir.item = self.dir.item, self.item
          old_esquerda = self.esq
          self.esq, self.dir = self.dir, self.dir.dir
          self.esq.esq, self.esq.dir = old_esquerda, self.esq.esq

     def rotacaoDireita(self):
          self.item, self.esq.item = self.esq.item, self.item
          old_direita = self.dir
          self.esq, self.dir= self.esq.esq, self.esq
          self.dir.esq, self.dir.dir = self.dir.dir, old_direita

     def rotacaoEsquerdaDireita(self):
          self.esq.rotacaoEsquerda()
          self.rotacaoDireita()

     def rotacaoDireitaEsquerda(self):
          self.dir.rotacaoDireita()
          self.rotacaoEsquerda()


     

N = ArvoreAvl(30)
N.setaRoot(N)
#N.inserir(40)
N.inserir(24)
#N.inserir(58)
#N.inserir(48)
#N.inserir(26)
N.inserir(11)
#N.inserir(13)
N.red()
print(N.balanceado())
